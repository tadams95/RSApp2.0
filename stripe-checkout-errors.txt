 // CURRENT ERRORS
ERROR  Error fetching payment sheet params: [SyntaxError: JSON Parse error: Unexpected character: <]
 ERROR  Payment initialization error: [Error: Failed to initiate payment process]
 ERROR  Error fetching payment sheet params: [SyntaxError: JSON Parse error: Unexpected character: <]
 ERROR  Payment initialization error: [Error: Failed to initiate payment process]
 ERROR  Payment error: {"code": "Failed", "declineCode": null, "localizedMessage": "No payment sheet has been initialized yet. You must call `initPaymentSheet` before `presentPaymentSheet`.", "message": "No payment sheet has been initialized yet. You must call `initPaymentSheet` before `presentPaymentSheet`.", "stripeErrorCode": null, "type": null}

// IMPLEMENTED FIXES (May 27, 2025)
1. Fixed API endpoint usage - Now targeting `/payment-sheet` endpoint specifically
2. Enhanced error handling in fetchPaymentSheetParams:
   - Added response validation and detailed error reporting
   - Added Accept header for JSON responses
   - Improved error messages with raw response data for debugging
3. Improved payment sheet initialization:
   - Added timeout protection (15 seconds)
   - Improved state management with proper reset between attempts
   - Added consistent styling with the app's design language
4. Enhanced payment flow sequence:
   - Added retry logic for initialization failures
   - Added proper state cleanup after completion
   - Better synchronization between address collection and payment
5. Added delay between AddressSheet closing and payment initialization
6. Improved user feedback with more specific error messages
7. Added comprehensive logging for easier troubleshooting

// NEW ERROR IDENTIFIED (May 27, 2025)
ERROR: "Invalid API Key provided: pk_test_***********************************************************************************************DFDw"

ROOT CAUSE:
There is a mismatch between the Stripe API environment keys. The cloud function is using LIVE mode keys 
while the client app is using TEST mode keys. Specifically:

1. Server (Cloud Function):
   - Creates payment intents with LIVE keys
   - Returns ephemeral keys starting with "ek_live_"
   - Is configured to return "pk_live_51NFhuOHnXmOBmfaDu16tJEuppfYKPUivMapB9XLXaBpiOLqiPRz2uoPAiifxqiLT49dyPCHOSKs74wjBspzJ8zo600yGYluqUe"

2. Client (Mobile App):
   - Was using StripeProvider with TEST key: "pk_test_51KKkvnDcnPBRlCcSHabYQ8vdzxj2Rxla6Qek3YpKXhsirsJ7JkXHxZDsZLQYJnwY6wOJqy8B4jgyLpS5W1BYEfYY00XSeLDFDw"

SOLUTION IMPLEMENTED:
1. Updated client to use LIVE key that matches server
   - Changed the StripeProvider publishableKey to match the live key from the server:
     "pk_live_51NFhuOHnXmOBmfaDu16tJEuppfYKPUivMapB9XLXaBpiOLqiPRz2uoPAiifxqiLT49dyPCHOSKs74wjBspzJ8zo600yGYluqUe"
   - Added proper merchant identifier for Apple Pay: "merchant.com.ragestate.app"
   - Added URL scheme for deeplinks: "ragestate"
   - Added returnURL to payment initialization for 3D Secure authentication

2. Fixed warnings about missing returnURL:
   - Added returnURL parameter to initPaymentSheet configuration: "ragestate://stripe-redirect"

IMPORTANT FOR PRODUCTION:
- The app is now configured to process REAL payments with REAL money
- Test with real cards but small amounts initially
- Monitor the Stripe dashboard for successful transactions

// ORIGINAL RESOLUTION PLAN

The errors above indicate three key issues in the Stripe checkout flow:

1. JSON Parse Error: The API is returning HTML or non-JSON content instead of the expected JSON
2. Payment Sheet Initialization Failures: Failed to initialize the payment sheet
3. Sequence Error: Attempting to present a payment sheet before it's initialized

Steps to resolve these issues:

A. API/Backend Issues:
   1. Verify the Cloud Function deployment status - ensure "stripePayment" function is properly deployed
   2. Check Firebase logs for the "stripePayment" function to identify server-side errors
   3. Verify the Firebase project and region match the API URL being used
   4. Add better error handling in the cloud function to return valid JSON even in error cases
   5. Ensure proper CORS headers are set in the Express app

B. Client-Side Fixes:
   1. Improve error handling in fetchPaymentSheetParams:
      - Add response status code checks
      - Validate response is JSON before parsing
      - Add detailed logging of raw response when parsing fails
   
   2. Fix state management in payment flow:
      - Ensure paymentSheetInitialized state is properly reset between attempts
      - Add retry logic with exponential backoff for API failures
      - Add timeout handling to prevent UI from being stuck in loading state
   
   3. Add better synchronization between AddressSheet and Payment flows:
      - Ensure address details are properly passed to the payment process
      - Add state verification before presenting payment sheet

C. Implementation Order:
   1. First implement the client-side logging improvements to get better error information
   2. Check cloud function logs and fix any server-side issues
   3. Implement client-side fixes for robustness
   4. Add comprehensive error handling and fallbacks

D. Testing Plan:
   1. Test with both event tickets and physical items requiring shipping
   2. Test with new and existing customers
   3. Test error scenarios (network failures, etc.)
   4. Verify cleanup after failed attempts